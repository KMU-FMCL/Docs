<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Quartz 4.0</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on 🪴 Quartz 4.0</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>REST(ful)</title>
    <link>https://quartz.jzhao.xyz/Web/REST</link>
    <guid>https://quartz.jzhao.xyz/Web/REST</guid>
    <description>1 . 1 . 3 REST(ful) REST(Representational State Transfer)의 주요 특징 HTTP 프로토콜 사용 상태 비저장(Stateless) 캐시 가능 리소스 기반 RESTful Web Service 의 핵심 개념 Resource : 작업을 수행할 수 있는 데이터 Endpoint : 고유한 URL 과 HTTP 동사(동작)로 구성된 기능 접근 HTTP 동사와 CRUD 작업의 대응 POST : 생성(Create) GET : 읽기(Read) PUT/PATCH : 수정(Update) DELETE : 삭제(Delete) RESTful Communication 요청 : 클라이언트가 데이터를 헤더, URL, 쿼리 파라미터, 본문에 담아 전송 응답 : 서버가 상태 코드, 헤더, 본문으로 응답 HTTP 상태 코드 100번대 : Information 200번대 : Success 300번대 : Redirection 400번대 : Client Error 500번대 : Server Error PS) 418 상태 코드(I’m a teapot)는 Web 의 유머러스한 Easter Egg .</description>
    <pubDate>Fri, 30 Aug 2024 01:53:03 GMT</pubDate>
  </item><item>
    <title>API Type</title>
    <link>https://quartz.jzhao.xyz/Web/API-Type</link>
    <guid>https://quartz.jzhao.xyz/Web/API-Type</guid>
    <description>1 . 1 . 1 API Type 각 API 는 다음을 정의 Protocol : Control structure Format : Content structure API 종류 초기 API 주로 Local Libaray Function 호출 형태 원격 프로시저 호출(RPC) 다른 Process 나 Computer 의 Function 를 Local Function 처럼 호출 Ex) gRPC1 Messaging(RPC) Process 간 Small data Chunk2 Command 나 Event 가능 Ex) Apache Kafka3, RabbitMQ4, NATS5, ZeroMQ6 Communication Pattern(RPC) Request - Response : Web Browser - Web Server Publish - Subscribe(Pub - Sub) : Publisher 가 Message publish, Subscriber 가 선별적으로 Receive Queue : Pub - Sub 와 유사하나 Single Subscriber 만 Message 처리 이 모든 기술들은 Web Service 에서도 Back-end 작업 수행 등에 활용 가능 Footnotes grpc.io ↩ 조작, Data를 더 작은 단위로 나눈 것 ↩ kafka.apache.org ↩ www.rabbitmq.com ↩ nats.io ↩ zeromq.org ↩ .</description>
    <pubDate>Fri, 30 Aug 2024 01:23:48 GMT</pubDate>
  </item><item>
    <title>Modern Web</title>
    <link>https://quartz.jzhao.xyz/Web/Web</link>
    <guid>https://quartz.jzhao.xyz/Web/Web</guid>
    <description>1. Web 의 역할 변화 전통적으는 콘텐츠 중심이었으나, 현재는 API1를 통한 연결성이 중요 2. Web 개발의 분화 Front-end : UI2 제공(JS, Mobile App, etc) Back-end : Database 접근과 Business Logic3 처리 Transclude of Service--and--API#1--1service--api Transclude of API-Type#1--1--1api-type Transclude of HTTP#1--1--2http Transclude of REST#1--1--3-restful Footnotes Application programming Interface ↩ User Interface ↩ Program 의 핵심 Logic(어떻게 데이터가 생성되고 저장되고 수정되는지를 정의) ↩ .</description>
    <pubDate>Fri, 30 Aug 2024 01:23:06 GMT</pubDate>
  </item><item>
    <title>HTTP</title>
    <link>https://quartz.jzhao.xyz/Web/HTTP</link>
    <guid>https://quartz.jzhao.xyz/Web/HTTP</guid>
    <description>1 . 1 . 2 HTTP Tim Berners-Lee 가 제한한 WWW(World-Wide-Web)의 3가지 핵심 구성요 HTML : Data Display Language HTTP : Client - Server Protocol URL : Web Resource Addressing Schema 이 세 가지 요소의 조합은 처음에는 단순해 보였지만, 시간이 지나면서 매우 강력하고 유용한 것으로 입증 Web 이 발전하면서 다양한 실험과 혁신(예: IMG 태그)이 이루어졌고, 이는 Web 의 필수적인 부분 이러한 발전 과정에서 웹 표준의 중요성이 부각되어 더욱 체계적인 정의가 이루어지게 됨.</description>
    <pubDate>Thu, 29 Aug 2024 22:48:58 GMT</pubDate>
  </item><item>
    <title>Directory</title>
    <link>https://quartz.jzhao.xyz/Linux/Default-Commands/Directory_commands</link>
    <guid>https://quartz.jzhao.xyz/Linux/Default-Commands/Directory_commands</guid>
    <description>1. Directory pwd : 현재 위치 확인 cd : 이동 ls : Directory 안 내용 출력 ls -a : 숨긴 파일 모두 출력 ls -d : Directory 자체의 정보 출력 ls -i : incode1 번호 출력 ls -A : ., ..를 제외한 모든 목록 출력2 ls -F : File 종류 표시3 ls -L : Symbolic link 의 경우 원본 File 의 정보 출력 ls -R : 하위 Directory 의 목록 출력 mkdir : Directory 생성 mkdir -p : SubDirectory 를 계층적으로 생성할 때 중간 단계의 Directory 를 자동 생성 rmdir : Directory delete Footnotes File, Directory 에 관한 정보를 가지는 숫자 ↩ File, Directory 의 이름 앞에 붙으면 Hidden File, Directory - .</description>
    <pubDate>Thu, 29 Aug 2024 22:41:51 GMT</pubDate>
  </item><item>
    <title>Edit document</title>
    <link>https://quartz.jzhao.xyz/Linux/Default-Commands/vim</link>
    <guid>https://quartz.jzhao.xyz/Linux/Default-Commands/vim</guid>
    <description>3. Edit documents vi : 지정한 File 편집 PS) vim1을 더 추천 : : Command mode 진입 q : 종료 q! : 강제 종료 w : File 저장 wq : 저장 후 종료 insert mode 전환 i : 현재 커서 위치에 insert I : 현재 Row 맨 앞에 insert a : 현재 커서 다음 위치에 insert A : 현재 Row 마지막에 insert o : 아래 Row 에 insert O : 위 Row 에 insert 커서 Move w : 다음 Word 첫 character 로 Move b : 이전 Word 첫 character 로 Move ctrl + f : 한 Page 아래로 커서 Move ctrl + b : 한 Page 위로 커서 Move G : 마지막 Row 로 커서 Move number : n Row 로 커서 Move 내용 delete x : 현재 커서 위치의 한 character delete X : 현재 커서 위치 이전한 한 character delete dw : 현재 커서 위치의 Word delete db : 현재 커서 위치 이전 Word delete dd : 현재 커서 위치의 Row delete [number]dd : 현재 커서 위치부터 아래 n Row 을 delete d^ : 현재 Row 에서 현재 커서 위치 이전 Row delete d$ : 현재 Row 에서 현재 커서 위치 이후 Row delete Take command u : 이전 Take command U : 해당 Row 에서 한 모든 Command 을 take e! : 마지막으로 저장한 애용 이후의 것을 모두 Take ctrl + r : 이전 Take command 을 take Copy &amp; Paste yy : 현재 커서 위치의 Row 을 copy [number]yy : 현재 커서에서 아래의 n Row 을 copy p : 현재 커서 위치 아래 Row 에 paste P : 현재 커서 위치 위 Row 에 paste yw : 현재 커서 이후 Copy Word yb : 현재 커서 이전 Copy word Search /String : String 을 아래 방향으로 Search ?String : String 을 위 방향으로 검색 n : 다음 Search for string N : 이전 Search for string Replace s/String-1/String-2 : 현재 커서 위치 Row 에서 첫 번째 나오는 String-1 을 String-2 로 변경 %s/String-1/String-2 : File 전체에서 모든 String-1 을 String-2 로 변경 File alias r [file] : 지정한 File 을 읽어 들여 현재 커서 위치로 삽입 e : 지정한 파일로 전환 - 저장 완료 후 기능 n : vi 시작 시 여러 File 을 지정했을 경우 다음 File 로 전환 Preferences ~/.vimrc 편집 set nu : File 내용의 각 Row 에 Row number 표시 set nonu : Row number 표시를 take set list : 눈에 보이지 않는 Special character 를 표시 set showmode : Current mode 표시 set noshowmode : Current mode 표시 take set : set으로 설정한 모든 vi Preferences 값을 출력 set all : 모든 vi Environment variable 와 Current 값 출력 Footnotes 어느정도 익숙해진 뒤 gedit이나 vscode를 쓰지 않고 vim을 더 잘 황용하고 싶다면 nvim을 추천한다.</description>
    <pubDate>Thu, 29 Aug 2024 22:40:27 GMT</pubDate>
  </item><item>
    <title>Ubuntu</title>
    <link>https://quartz.jzhao.xyz/Linux/Ubuntu</link>
    <guid>https://quartz.jzhao.xyz/Linux/Ubuntu</guid>
    <description>Directory Structure Default Commands 1. Directory 2. File 3. Edit Document.</description>
    <pubDate>Thu, 29 Aug 2024 22:37:44 GMT</pubDate>
  </item><item>
    <title>Service &amp; API</title>
    <link>https://quartz.jzhao.xyz/Web/Service--and--API</link>
    <guid>https://quartz.jzhao.xyz/Web/Service--and--API</guid>
    <description>1 . 1 Service &amp; API 1. API 의 중요성 Front-end &amp; Back-end 간 통신 수단 Modern Web 에서 API design 의 중요성이 Website design 만큼 중요 2. API 의 역할 Database schema1 와 유사한 규약 역할 API 정의와 수정, 중차대한 작업 Footnotes Database System 에서 구조, 구성 및 관계를 정의 ↩ .</description>
    <pubDate>Thu, 29 Aug 2024 22:21:43 GMT</pubDate>
  </item><item>
    <title>Welcome to KMU-FMCL Docs</title>
    <link>https://quartz.jzhao.xyz/</link>
    <guid>https://quartz.jzhao.xyz/</guid>
    <description>OS Ubuntu Software Docker ROS Web Service &amp; API 동시성 Layer Data See the documentation for how to get started.</description>
    <pubDate>Thu, 29 Aug 2024 20:34:22 GMT</pubDate>
  </item><item>
    <title>Directory structure</title>
    <link>https://quartz.jzhao.xyz/Linux/Directory_Structure</link>
    <guid>https://quartz.jzhao.xyz/Linux/Directory_Structure</guid>
    <description>...</description>
    <pubDate>Thu, 29 Aug 2024 11:34:05 GMT</pubDate>
  </item>
    </channel>
  </rss>