<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 KMU-FMCL</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on 🪴 KMU-FMCL</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Capston II</title>
    <link>https://quartz.jzhao.xyz/Project/CapstoneII</link>
    <guid>https://quartz.jzhao.xyz/Project/CapstoneII</guid>
    <description>Capston II 1. Vehicle Body 작동 여부 확인하기 RPLidar A1M8-R6 장착 &amp; 작동 테스트 Lidar Point Cloud 가공하는 법 공부 2. Server 클라이언트에서 영상 수신 시 서버에서 송신 테스트 Yolov5 or Yolov8 or Yolov10 테스트[^1] .</description>
    <pubDate>Fri, 13 Sep 2024 10:50:56 GMT</pubDate>
  </item><item>
    <title>Structure</title>
    <link>https://quartz.jzhao.xyz/Language/C++/C++-Structure</link>
    <guid>https://quartz.jzhao.xyz/Language/C++/C++-Structure</guid>
    <description>Structure C++ 언어에서는 구조체의 태그(tag)가 곧 자료형 Example #include &lt;iostream&gt; using namespace std; struct Score { char name[12]; int kor, eng, math, tat; flot ave; }; int main() { // Struct ...</description>
    <pubDate>Thu, 12 Sep 2024 03:09:53 GMT</pubDate>
  </item><item>
    <title>Body</title>
    <link>https://quartz.jzhao.xyz/Language/Python/FastAPI/FastAPI-Body</link>
    <guid>https://quartz.jzhao.xyz/Language/Python/FastAPI/FastAPI-Body</guid>
    <description>Body GET 멱등성(idempotent)1 을 가져야 하며, Result 만 Return 해야 함. Request Path &amp; Query Parameter 는 사용 가능 Request Body 는 사용 불가능 Request Body 주로 POST, PUT &amp; PATCH Request 에서 Server 로 Info 를 전달할 때 사용 Example Body Endpoint 를 GET 에서 POST 로 Change Return String Body from fastapi import FastAPI, Body app = FastAPI() @app.post(&quot;/hi&quot;) def greet(who: str = Body(embed=True)): return f&quot;Hello? {who}?&quot; Caution FastAPI 에서 POST Request 로 Body 를 받으려면 Function Parameter 에 Body(embed=True) 사용 Client 에서 Request Body 를 보낼 때는 JSON Type 으로 Data 전송 Embed 부분은 단순히 “String” 이 아니라 {&quot;key&quot;: &quot;Value&quot;} 처럼 보여야 함 Test Argument json 을 사용해 Request Body 에 JSON Encoding 한 Data 전달(POST Request) HTTPie http -v localhost:8000/hi who=Mom Requests &gt;&gt;&gt; import requests &gt;&gt;&gt; r = requests.post(&quot;http://localhost:8000/hi&quot;, json={&quot;who&quot;, &quot;Mom&quot;}) &gt;&gt;&gt; r.json() Footnotes 같은 질문엔 같은 답을 얻는다는 뜻 ↩ .</description>
    <pubDate>Wed, 11 Sep 2024 08:44:17 GMT</pubDate>
  </item><item>
    <title>Application</title>
    <link>https://quartz.jzhao.xyz/Language/Python/FastAPI/FastAPI-Application</link>
    <guid>https://quartz.jzhao.xyz/Language/Python/FastAPI/FastAPI-Application</guid>
    <description>Application Default Python Package Package FastAPI Web Framework pip install fastapi Uvicorn Asynchronous Web Server pip install uvicorn HTTPie Text Web Client 가장 잘 알려진 Text Web ...</description>
    <pubDate>Wed, 11 Sep 2024 08:31:53 GMT</pubDate>
  </item><item>
    <title>FastAPI</title>
    <link>https://quartz.jzhao.xyz/Language/Python/FastAPI/FastAPI</link>
    <guid>https://quartz.jzhao.xyz/Language/Python/FastAPI/FastAPI</guid>
    <description>FastAPI Sebastian Ramirez, FastAPI Developer FastAPI 는 Standard Python Type Hint 를 기반으로, Python 3.6 이상에서 API 를 구축하는 현대적이고 빠른(고성능) Web Framework 다. Subtitle Introduction Application HTTP Request URL Path Query Parameter Body Header Multiple Request Data Request 권장 사항 HTTP Response Status Code Header Response Type Type Conversion Model Type &amp; Response Model .</description>
    <pubDate>Wed, 11 Sep 2024 02:51:55 GMT</pubDate>
  </item><item>
    <title>API Type</title>
    <link>https://quartz.jzhao.xyz/Web/API-Type</link>
    <guid>https://quartz.jzhao.xyz/Web/API-Type</guid>
    <description>API Type 각 API 는 다음을 정의 Protocol : Control structure Format : Content structure API 종류 초기 API 주로 Local Libaray Function 호출 형태 원격 프로시저 호출(RPC) 다른 Process 나 Computer 의 Function 를 Local Function ...</description>
    <pubDate>Wed, 11 Sep 2024 00:58:38 GMT</pubDate>
  </item><item>
    <title>Service &amp; API</title>
    <link>https://quartz.jzhao.xyz/Web/Service--and--API</link>
    <guid>https://quartz.jzhao.xyz/Web/Service--and--API</guid>
    <description>Web Service &amp; API API1 의 중요성 Front-end &amp; Back-end 간 Communication 수단 Modern Web 에서 API design 의 중요성이 Website Design 만큼 중요 API 의 역할 Database Schema2 와 유사한 규약 역할 API 정의와 수정, 중차대한 Task ...</description>
    <pubDate>Wed, 11 Sep 2024 00:58:06 GMT</pubDate>
  </item><item>
    <title>Data</title>
    <link>https://quartz.jzhao.xyz/Web/Data</link>
    <guid>https://quartz.jzhao.xyz/Web/Data</guid>
    <description>Data Data Storage &amp; Access Method 의 진화 NoSQL, NewSQL1 등 새로운 Database 기술 등장 Web 은 여전히 Relational Database 의 Front-end 역할 머신러닝의 영향 Database 를 넘어 Machine Learning 이 Technical Environment ...</description>
    <pubDate>Wed, 11 Sep 2024 00:57:04 GMT</pubDate>
  </item><item>
    <title>REST(ful)</title>
    <link>https://quartz.jzhao.xyz/Web/REST</link>
    <guid>https://quartz.jzhao.xyz/Web/REST</guid>
    <description>REST(ful) REST(Representational State Transfer)의 주요 특징 HTTP Protocol Usage 상태 비저장(Stateless)1 Cacheable2 Resource3-based4 RESTful Web Service 의 핵심 개념 Resource : Task 를 수행할 수 있는 ...</description>
    <pubDate>Wed, 11 Sep 2024 00:55:54 GMT</pubDate>
  </item><item>
    <title>Layer</title>
    <link>https://quartz.jzhao.xyz/Web/Layer</link>
    <guid>https://quartz.jzhao.xyz/Web/Layer</guid>
    <description>Layer Three-Tier Model Application 의 Size 와 복잡성을 관리하기 위해 널리 사용됨 Term 은 다양하게 사용되고 있으므로 이름이 다르다고 새로운 개념이 아니며 오랫동안 사용되어 온 방식 Term Web : Client 의 Request 를 수집하고, Service Layer 을 Call 해 Response ...</description>
    <pubDate>Wed, 11 Sep 2024 00:54:30 GMT</pubDate>
  </item>
    </channel>
  </rss>