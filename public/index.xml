<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🪴 Quartz 4.0</title>
      <link>https://quartz.jzhao.xyz</link>
      <description>Last 10 notes on 🪴 Quartz 4.0</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>ROS 2</title>
    <link>https://quartz.jzhao.xyz/ROS/ROS-2</link>
    <guid>https://quartz.jzhao.xyz/ROS/ROS-2</guid>
    <description></description>
    <pubDate>Fri, 30 Aug 2024 15:44:17 GMT</pubDate>
  </item><item>
    <title>Concurrency</title>
    <link>https://quartz.jzhao.xyz/Web/Concurrency</link>
    <guid>https://quartz.jzhao.xyz/Web/Concurrency</guid>
    <description>1 . 2 Concurrency Service 가 성장 시 효율성과 확장성이 중요, Latency1 &amp; Throughput2 개선 필요 완전한 병렬 처리가 아니라 Busy Waiting3 을 피하는 걸 의미 Asynchronous4 Processing Python 은 기본적으론 Synchronous5 이지만, Asynchronous Processing 도 가능 I/O-bound6 Task 에 특히 유용 FastAPI 에 Synchronous Processing 을 적용하면 Performance 가 크게 향상 CPU 집약적 Task 를 과도하게 수행하지 않도록 주의7 Concurrency 은 Modern Web Service 에서 중요한 개념이며, 적절히 활용하면 Performance 를 크게 개선 가능 Footnotes 사전 대기 시간 ↩ Service 와 Caller 간의 초당 Byte 수 ↩ Process 나 Thread 가 특정 조건이 충족될 때까지 Idle State 로 대기하는 대신,계속해서 해당 조건을 확인하는 Task 를 반복하는 것CPU 자원을 소모하면서 대기하기에 비효율적일 순 있으나, Fast Response 가 필요한 상황에서 사용되기도 함 ↩ 비동기식 : Task 가 시작된 후 완료될 때 까지 기다리지 않고, Other Task 를 병행하여 수행할 수 있는 방식 ↩ 동기식 : Task 가 순차적으로 진행되며, 하나의 Task 가 완료될 때까지 Next Task 가 수행되지 않는 방식 ↩ Program 이나 Task 가 주로 I/O 에 의해 제한 되는 상태 Disk Read/Write, Network Communication, File I/O, etc 에 많은 시간 소요 CPU 보다 I/O Task의 속도가 전체 성능을 좌우 .</description>
    <pubDate>Fri, 30 Aug 2024 10:50:38 GMT</pubDate>
  </item><item>
    <title>Welcome to KMU-FMCL Docs</title>
    <link>https://quartz.jzhao.xyz/</link>
    <guid>https://quartz.jzhao.xyz/</guid>
    <description>OS Ubuntu Software Docker ROS Web Service &amp; API Concurrency Layer Data See the documentation for how to get started.</description>
    <pubDate>Fri, 30 Aug 2024 10:29:51 GMT</pubDate>
  </item><item>
    <title>GraphQL</title>
    <link>https://quartz.jzhao.xyz/Web/GraphQL</link>
    <guid>https://quartz.jzhao.xyz/Web/GraphQL</guid>
    <description>1 . 1 . 6 GraphQL RESTful API 의 한계 특정 상황에서 사용하기 번거로울 수 있음 GraphQL1 Facebook 이 개발한 더 유연한 Query Laungage RESTful API 보다 더 유연한 Data Request 기능 현재로서는 사용할 계획 X 나중에 여러대의 서버 혹은 확대할 시 적합하지 않다고 생각되면 검토 예정 Footnotes graphql.org ↩ .</description>
    <pubDate>Fri, 30 Aug 2024 10:26:07 GMT</pubDate>
  </item><item>
    <title>JSON:API</title>
    <link>https://quartz.jzhao.xyz/Web/JSON_API</link>
    <guid>https://quartz.jzhao.xyz/Web/JSON_API</guid>
    <description>1 . 1 . 5 JSON:API RESTful Design &amp; JSON Data Format 조합이 일반화되었지만, 여전히 모호한 부분과 논쟁의 여지가 있음 JSON:API1는 이러한 문제를 해결하기 위해 더 엄격한 사양 제안 현재로서는 느슨한 RESTful 방식 사용 추후 문제 및 논란이 발생할 경우 JSON:API 또는 이와 유사한 엄격한 방식 사용할 예정 Footnotes jsonapi.org ↩ .</description>
    <pubDate>Fri, 30 Aug 2024 10:24:36 GMT</pubDate>
  </item><item>
    <title>JSON &amp; API Data Type</title>
    <link>https://quartz.jzhao.xyz/Web/JSON--and--API-Data-Type</link>
    <guid>https://quartz.jzhao.xyz/Web/JSON--and--API-Data-Type</guid>
    <description>1 . 1 . 4 JSON &amp; API Data Type JSON(JavaScript Object Notation) Front-End &amp; Back-End 간 Data 교환을 위한 Text 기반 Format List 나 복잡한 Data Structure 를 표현하는 데 적합 구문은 JavaScript 에서 유래했지만 Python 의 Directory 와 매우 유사 XML 이나 SOAP 같은 이전의 Data Representation 을 대부분 대체 Modern Web Service 의 I/O Format 으로 널리 사용 중 간단하고 효율적인 Data Representation 으로, Modern Web Develop 에서 중요한 역할 .</description>
    <pubDate>Fri, 30 Aug 2024 10:23:57 GMT</pubDate>
  </item><item>
    <title>HTTP</title>
    <link>https://quartz.jzhao.xyz/Web/HTTP</link>
    <guid>https://quartz.jzhao.xyz/Web/HTTP</guid>
    <description>1 . 1 . 2 HTTP Tim Berners-Lee 가 제한한 WWW(World-Wide-Web)의 3가지 핵심 구성요소 HTML : Data Display Language HTTP : Client - Server Protocol URL : Web Resource Addressing Schema 이 세 가지 요소의 조합은 처음에는 단순해 보였지만, 시간이 지나면서 매우 강력하고 유용한 것으로 입증 Web 이 발전하면서 다양한 실험과 혁신(Ex: IMG 태그)이 이루어졌고, 이는 Web 의 필수적인 부분 이러한 발전 과정에서 웹 표준의 중요성이 부각되어 더욱 체계적인 정의가 이루어지게 됨.</description>
    <pubDate>Fri, 30 Aug 2024 10:23:37 GMT</pubDate>
  </item><item>
    <title>REST(ful)</title>
    <link>https://quartz.jzhao.xyz/Web/REST</link>
    <guid>https://quartz.jzhao.xyz/Web/REST</guid>
    <description>1 . 1 . 3 REST(ful) REST(Representational State Transfer)의 주요 특징 HTTP Protocol Usage 상태 비저장(Stateless)1 Cacheable2 Resource-based3 RESTful Web Service 의 핵심 개념 Resource : 작업을 수행할 수 있는 Data Endpoint : 고유한 URL 과 HTTP 동사(동작)로 구성된 기능 접근 HTTP 동사와 CRUD4 Task 의 대응 POST : 생성(Create) GET : 읽기(Read) PUT/PATCH : 수정(Update) DELETE : 삭제(Delete) RESTful Communication Request : Client 가 Data 를 Header , URL, Quary parameter, 본문에 담아 전송 Response : Server 가 State Code, Header, 본문으로 응답 HTTP State Code 1xx : Information 2xx : Success 3xx : Redirection 4xx : Client Error 5xx : Server Error PS) 418 State Code(I’m a teapot)는 Web 의 유머러스한 Easter Egg Footnotes Server 가 Client 의 이전 Request 를 저장하지 않는 Architecture ↩ Data 를 Cache 에 저장할 수 있는 지 여부(Server 로 부터 Re-request 하지 않고 Client Cache 에서 가져올 수 있는 Data) ↩ Resource : User 가 식별하고 Task 를 수행할 수 있는 Data특정 System 이나 설계가 Resource 를 중심으로 작동하거나 조작되는 방식 ↩ Database 의 기본 동작 쓰기(Create) 읽기(Read) 수정(Update) 삭제(Delete) .</description>
    <pubDate>Fri, 30 Aug 2024 10:23:22 GMT</pubDate>
  </item><item>
    <title>Service &amp; API</title>
    <link>https://quartz.jzhao.xyz/Web/Service--and--API</link>
    <guid>https://quartz.jzhao.xyz/Web/Service--and--API</guid>
    <description>1 . 1 Service &amp; API API1 의 중요성 Front-end &amp; Back-end 간 Communication 수단 Modern Web 에서 API design 의 중요성이 Website Design 만큼 중요 API 의 역할 Database Schema2 와 유사한 규약 역할 API 정의와 수정, 중차대한 작업 Subtitle API Type HTTP REST(ful) JSON &amp; API Data Type JSON:API GraphQL Footnotes Application Programming Interface ↩ Database System 에서 Structure, 구성 및 관계를 정의 ↩ .</description>
    <pubDate>Fri, 30 Aug 2024 10:15:16 GMT</pubDate>
  </item><item>
    <title>Modern Web</title>
    <link>https://quartz.jzhao.xyz/Web/Web</link>
    <guid>https://quartz.jzhao.xyz/Web/Web</guid>
    <description>1. Web 의 역할 변화 전통적으는 Content 중심이었으나, 현재는 API1를 통한 연결성이 중요 2. Web 개발의 분화 Front-end : UI2 제공(JS, Mobile App, etc) Back-end : Database 접근과 Business Logic3 처리 Footnotes Application programming Interface ↩ User Interface ↩ Program 의 핵심 Logic(어떻게 Data 가 생성되고 저장되고 수정되는지를 정의) ↩ .</description>
    <pubDate>Fri, 30 Aug 2024 10:13:01 GMT</pubDate>
  </item>
    </channel>
  </rss>